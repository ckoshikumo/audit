*Audit* is a single-header unit-testing framework for C.

* Features
- Automatically declares ~main~ and registers all the tests; no need to hook anything manually.

- Each test may have ~setup~ and ~teardown~ functions.

- Supports dividing a test suite among several files.

- Simple STB-like compilation.

* Why?
I wrote ~audit~ because I needed some testing done and, incrediby, there weren't ANY unit-testing frameworks for C. None whatsoever. Zero. It was truly shocking.

OK, now being serious: there are three reasons why I made this.

- I wanted a header-only library for simple compilation.

- I didn't want to have to declare ~main~ and manually put the tests there (because I'm lazy, and because I would certainly forget to include some tests).

- The thing I wanted to test also involved a lot of macros, so ~audit~ was a way to practice the black art of the preprocessor.

* Requirements
~audit~ uses ~__attribute((constructor))__~, which means it needs GCC or Clang. Untested with other compilers.

* Usage
** Basic usage
This is the simplest way to use audit: one test file testing a header. Here's ~test.c~:

#+begin_src C
#include "header_to_test.h"
#define AUDIT_IMPLEMENTATION
#include "audit.h"

audit("Description of test (group of checks, or asserts)") {
        int a[] = { 1, 2, 3 };
        check_eq(a[0], 1, "%i", "Description of check");
        check_eq(a[1], 43, "%i", "Description of check");
}
#+end_src

Compile this normally (no special flags needed) and run:

: ./a.out

This should run all the tests and assertions.

The second check of the example above will obviously fail, and ~audit~ will output the following (in color):

#+begin_example
AUDIT START

Running all tests.

.X

AUDIT FAILED

0: Description of test (group of checks, or asserts)
	./test.c:8:	Description of check [expected 43, actual 2]

1 tests (1 failed), 2 assertions (1 failed)
#+end_example

The dots and Xs indicate the individual asserts of the entire suite.

Notice that ~audit~ prints a message with the expected and actual values; that's why we need to pass the format specifier (in this case, "%i") when defining the check.

To list all available audits:

: ./a.out --list

Then, you can select which audits you want to run:

: ./a.out 1 4

Will run audits ~1~ and ~4~.

** Setup and teardown
The ~audit~ macro can optionally receive function pointers. The ~setup~ function will be called before any check is run, and the ~teardown~ function will be called after all the checks are run.

The functions can be named anything, but they must have the signature ~void fn(void)~.

#+begin_src C
#include "header_to_test.h"
#define AUDIT_IMPLEMENTATION
#include "audit.h"

#include "stdlib.h"

size_t n = 10;
int *a = NULL;

void st(void) {
        a = malloc(sizeof(*a), n);
}

void td(void) {
        free(a);
        a = NULL;
}

audit("Using for loop to insert values", st, td) {
        for (size_t i = 0; i < n; i++) {
                a[i] = i * 2;
        }
        check_eq(a[2], 4, "%i", "Initial insertion");
}
#+end_src

You don't need to specify both (I mean, you probably should, but you don't need to):

#+begin_src C
#include "header_to_test.h"
#define AUDIT_IMPLEMENTATION
#include "audit.h"

void st(void) {
        // Setup test environment
}

void td(void) {
        // Teardown test environment
}

audit("Setup only", st) {
        // ...
}


audit("Teardown only", NULL, td) {
        // ...
}
#+end_src

** Checks
~audit~ comes with a few predefined checks with default messages. They are:

#+begin_src c
check_eq(_lhs, _rhs, _fmt, _desc);// _lhs and _rhs are equal
check_neq(_lhs, _rhs, _fmt, _desc); // _lhs and _rhs are NOT equal
check_lt(_lhs, _rhs, _fmt, _desc); // _lhs is LESS THAN _rhs
check_gt(_lhs, _rhs, _fmt, _desc); // _lhs is GREATER THAN _rhs
check_lteq(_lhs, _rhs, _fmt, _desc); // _lhs is LESS THAN or EQUAL TO _rhs
check_gteq(_lhs, _rhs, _fmt, _desc); // _lhs is GREATER THAN or EQUAL TO _rhs
#+end_src

~_fmt~ is the format specifier that will be used for printing in case of error, and ~_desc~ is a short description of the check.

We've already seen ~check_eq~ being used, and all the others follow the same pattern:

#+begin_src c
check_lt(*a, 10.5, "%lf", "Description of check");
#+end_src

There's also a generic check for more involved assertions:

#+begin_src c
check(_assert, _desc, _msg, ...);
#+end_src

This allows you to specify a freeform assertion. It doesn't have a default message; you have to specify it by hand, the same as dealing with printf directly:

#+begin_src c
int min = 10;
int max = 20;

check(a[0] > min && a[0] < max, "Item after pushing", "should be between %i and %i", min, max);
#+end_src

The output will follow ~audit~'s predefined checks, with ~_msg~ being put after the description, enclosed in brackets:

#+begin_example
../test.c:11:	Item after pushing [should be between 10 and 20]
#+end_example

** Multiple test files
If the test file starts growing too large, or you want to neatly test each header in its own file, it's easy to split the suite.

Here's =test.c=:

#+begin_src c
#include "header_1.h"
#define AUDIT_IMPLEMENTATION
#include "audit.h"

audit("Desc") {
        // ... lots of checks
}

audit("Desc 2") {
        // ... lots of checks
}

// etc.
#+end_src

And here's =test_2.c=:

#+begin_src c
#include "header_2.h"
#include "audit.h"

audit("Desc") {
        // ... lots of checks
}

audit("Desc 2") {
        // ... lots of checks
}

// etc.
#+end_src

Simply compile them together. ~main~ will be defined wherever you defined ~AUDIT_IMPLEMENTATION~, and it'll pick up and run all the tests in the other files.

You can even make an entry point file, say =test_entry.c=, containing only:

#+begin_src c
#define AUDIT_IMPLEMENTATION
#include "audit.h"
#+end_src

And put all the tests themselves in separate, individual files.

** Customizations
- ~AUDIT_NO_COLORS~: define this if you don't want the output to be colorized with ANSI escape codes.

- ~AUDIT_COLOR_FAIL~: color for failed-related output. By default, "\x1b[31m", which is red.

- ~AUDIT_COLOR_INFO~: color for information-related output. By default, \x1b[33m", which is yellow.

- ~AUDIT_COLOR_OK~: color for success related output. By default, "\x1b[32m", which is green.

- ~AUDIT_PASS_ASSERT_STR~: by default, the dot . used to indicate a passing check.

- ~AUDIT_FAIL_ASSERT_STR~: by default, the X used to indicate a failed check.


There's also three defines related to the initial capacity of arrays that hold the tests, asserts and messages. Unless you absolutely want to avoid reallocations for some reason, and want to ensure that the suite will start with precisely the capacities needes, you don't have to worry about them too much. ~audit~ will resize the arrays as needed.

- ~AUDIT_INITIAL_N_TESTS~: default 50

- ~AUDIT_INITIAL_N_ASSERTS~: default 100

- ~AUDIT_INITIAL_N_MESSAGES~: default 100

(Note that the array holding pointers to the messages is allocated at initialization, but the messages themselves are only allocated when a check fails.)

* Future Plans
These are some things I have in mind to enhance ~audit~.

** TODO Implement scopes
Grouping of ~audits~, for selecting multiple tests at once.

** TODO Make it thread-safe and optionally run tests in parallel

** TODO Print dots one at a time
Currently, the printing of dots (or Xs) happen all at once, at the end. It's not *really* a progress indicador, just a visual summary of the final result. It would be nice if the dots were printed as the checks are completed.

** TODO Trap segfaults and print the offending assertion
Catch SIGSEGV signals, print the check and bail. (The signal callback can't use stdlib functions, so I'll have to use ~write~ directly.)

